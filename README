Using CHDL as a PCB-level HDL
-----------------------------

It may come as no surprise to anybody who has used any of the CHDL-related
projects, but I don't like to use schematics. My notebooks are full of little
pieces of them, sure, but when it comes to actually representing designs in
human-and-machine-readable fashion, I find schematics to be intrinsically
inferior to easily-customizable textual representations.

The Project
-----------

This project has its genesis in an EEPROM programmer design I wirewrapped up
around 2004 or so, using three 74LS191 up/down counters to control the address
lines of a 28c64 EEPROM attached to the parallel port. The design was very
simple, only programming and verifying a single type of EEPROM. I decided that
if I ever built this kind of device again, I would use shift registers instead
of counters, to allow more functions and wider support for EEPROMS and other
memory devices. Now, over a decade later, that I have finally committed to
building this kind of device, I have decided to make it as universal as
possible, supporting not only the programming and reading of various ROM
devices, but also general use as a GPIO interface, with a large number of
signals and a prototyping area. This finally morphed into the design I
ultimately built, which I call the Busyboard, a PC-connected digital
Swiss Army knife.

Nixing KiCad
------------

I was very excited to start laying out my PCB in KiCad, a widely-used open
source EDA platform and PCB editor. Since I was already had netlists in a
reasonable format, I assumed it would be no problem to use along with KiCad's
LVS (layout-versus-schematic) capability. After all, the industrial automation
is notorious for terse, easily-parsable and easily-generable file formats. What
I found instead was a workflow so set-in-stone that it seemed the idea of using
an external source of netlists had never even occurred to the original
developers.

As is clear from CHDL itself, what I do in these situations is create another,
lighter-weight tool that fits well with the workflows of open source hardware
projects. Call it NIH<link: https://en.wikipedia.org/wiki/Not_invented_here> if
you would like; I call it DIY <link:https://en.wikipedia.org/wiki/DIY_ethic>.
And what is open source hardware without the DIY ethic?

Introducing libpcb
------------------

Building the Netlist in CHDL
----------------------------

Routing the PCB Manually with libpcb
------------------------------------

With the library taken care of, now it was time to actually place and route the
design by hand.

Paper Test
----------

Since all of the device footprints were entered manually from technical
drawings, having the components fit was a concern. To alleviate my worries, I
did a simple check against a full scale printout of the board, lining up the
component pins on the paper to check for any dimension issues.

Visual Inspection
-----------------

Initial Test: LEDs and Persistence of Vision
--------------------------------------------

Talking SPI: SRAM and ADCs
--------------------------

Emulating a Memory System
-------------------------

The Code
--------